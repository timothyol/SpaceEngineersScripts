
        private const string RotorRightName = "Rotor R";
        private const string RotorLeftName = "Rotor L";
        private const string PistonRightName = "Piston R";
        private const string PistonLeftName = "Piston L";
        private bool Up = true;

        private const float ext = 1.5f;
        private const float ret = ext * -1f;


        private enum PistonState
        {
            Retracted = 1,
            Retracting = 2,
            Extending = 3,
            Extended = 4,
            Stopped = 5,
            Fucked = 6
        }

        public Program()
        {
            Runtime.UpdateFrequency = UpdateFrequency.Update1;
        }

        public void Main(string argument, UpdateType updateSource)
        {
            if (argument == "up")
                Up = true;
            if (argument == "down")
                Up = false;

            var rotorR = GridTerminalSystem.GetBlockWithName(RotorRightName) as IMyMotorStator;
            var rotorL = GridTerminalSystem.GetBlockWithName(RotorLeftName) as IMyMotorStator;
            var pistonR = GridTerminalSystem.GetBlockWithName(PistonRightName) as IMyPistonBase;
            var pistonL = GridTerminalSystem.GetBlockWithName(PistonLeftName) as IMyPistonBase;

            if (rotorR == null) Echo("RotorR is null :(");
            if (rotorL == null) Echo("rotorL is null :(");
            if (pistonR == null) Echo("pistonR is null :(");
            if (pistonL == null) Echo("pistonL is null :(");

            if (Up)
            {
                Echo("Going Up...");
                var state = GetStateUp(rotorR, rotorL, pistonR, pistonL);
                Echo("State = " + state.ToString());

                if (state == 1)
                {
                    rotorL.Attach();
                    if (rotorL.IsAttached)
                        rotorR.Detach();
                    if (rotorL.IsAttached && !rotorR.IsAttached)
                    {
                        pistonR.Velocity = ext;
                        pistonL.Velocity = ret;
                    }
                }
                else if (state == 2)
                {
                    //Wait...
                }
                else if (state == 3)
                {
                    rotorR.Attach();
                    if (rotorR.IsAttached)
                        rotorL.Detach();
                    if (rotorR.IsAttached && !rotorL.IsAttached)
                    {
                        pistonR.Velocity = ret;
                        pistonL.Velocity = ext;
                    }
                }
                else if (state == 4)
                {
                    //Wait...
                }
                else if (state == 5)
                {
                    pistonR.Velocity = ext;
                    pistonL.Velocity = ret;
                }
                else if (state == 6)
                {
                    pistonR.Velocity = ret;
                    pistonL.Velocity = ext;
                }
            }
            else
            {
                Echo("Going down...");
                var state = GetStateDown(rotorR, rotorL, pistonR, pistonL);
                Echo("State = " + state.ToString());

                switch (state)
                {
                    case 1:
                        rotorR.Attach();
                        if (rotorR.IsAttached)
                            rotorL.Detach();
                        if (rotorR.IsAttached && !rotorL.IsAttached)
                        {
                            pistonR.Velocity = ext;
                            pistonL.Velocity = -ext;
                        }
                        return;
                    case 2:
                        //Wait...
                        return;
                    case 3:
                        rotorL.Attach();
                        if (rotorL.IsAttached)
                            rotorR.Detach();
                        if (rotorL.IsAttached && !rotorR.IsAttached)
                        {
                            pistonR.Velocity = -ext;
                            pistonL.Velocity = ext;
                        }
                        return;
                    case 4:
                        //Wait...
                        return;
                    case 5:
                        pistonR.Velocity = -ext;
                        pistonL.Velocity = ext;
                        return;
                    case 6:
                        pistonR.Velocity = ext;
                        pistonL.Velocity = -ext;
                        return;
                }
            }
        }


        private int GetStateUp(IMyMotorStator rotorR, IMyMotorStator rotorL, IMyPistonBase pistonR, IMyPistonBase pistonL)
        {
            //States
            //1: Right Retracted, Left Extended, Right attached
            // --Attach left, detach right, reverse pistons
            //2: Left Attached, left retracting, right extending
            // --Wait
            //3: Left attached, left retracted, right extended
            // --Attach right, detach left, reverse pistons
            //4: Right Attached, right retracting, left extending
            // --Wait
            //5: L Attached, Left Extending|Extended, Right Retracting|Retracted
            // - Reverse pistons
            //6: R Attached, left Retracting | Retracted, Right Extending|Extended
            // - Reverse Pistons

            var rState = GetPistonState(pistonR);
            var lState = GetPistonState(pistonL);

            Echo("RotorR.IsAttached: " + rotorR.IsAttached.ToString());
            Echo("RotorL.IsAttached: " + rotorL.IsAttached.ToString());

            Echo("RState: " + rState);
            Echo("LState: " + lState);


            if (rotorR.IsAttached && rState == PistonState.Retracted && lState == PistonState.Extended)
                return 1;
            else if (rotorL.IsAttached && rState == PistonState.Extending && lState == PistonState.Retracting)
                return 2;
            else if (rotorL.IsAttached && rState == PistonState.Extended && lState == PistonState.Retracted)
                return 3;
            else if (rotorR.IsAttached && rState == PistonState.Retracting && lState == PistonState.Extending)
                return 4;
            else if (rotorL.IsAttached && (rState == PistonState.Retracted || rState == PistonState.Retracting) && (lState == PistonState.Extended || lState == PistonState.Extending))
                return 5;
            else if (rotorR.IsAttached && (lState == PistonState.Retracted || lState == PistonState.Retracting) && (rState == PistonState.Extended || rState == PistonState.Extending))
                return 6;

            return 0;
        }


        private int GetStateDown(IMyMotorStator rotorR, IMyMotorStator rotorL, IMyPistonBase pistonR, IMyPistonBase pistonL)
        {
            //States
            //1: L Attached, R Retracted, L Extended
            // --Attach R, Detach L, Extend R, Retract L
            //2: R Attached, R Extending, L Retracting
            // --Wait
            //3: R Attached, R Extended, L Retracted
            // --Attach L, Detach R, Extend L, Retract R
            //4: L Attached, R Retracting, L Extending
            // --Wait
            //5: L Attached, R Extending|Extended, L Retracting|Retracted
            // --Retract R, Extend L
            //6: R Attached, R Retracting|Retracted, L Extending|Extended
            // --Extend R, Retract L


            var rState = GetPistonState(pistonR);
            var lState = GetPistonState(pistonL);

            Echo("RotorR.IsAttached: " + rotorR.IsAttached.ToString());
            Echo("RotorL.IsAttached: " + rotorL.IsAttached.ToString());

            Echo("RState: " + rState);
            Echo("LState: " + lState);
            
            if (rotorL.IsAttached && rState == PistonState.Retracted && lState == PistonState.Extended)
                return 1;
            else if (rotorR.IsAttached && rState == PistonState.Extending && lState == PistonState.Retracting)
                return 2;
            else if (rotorR.IsAttached && rState == PistonState.Extended && lState == PistonState.Retracted)
                return 3;
            else if (rotorL.IsAttached && rState == PistonState.Retracting && lState == PistonState.Extending)
                return 4;
            else if (rotorL.IsAttached && (rState == PistonState.Extended || rState == PistonState.Extending) && (lState == PistonState.Retracted || lState == PistonState.Retracting))
                return 5;
            else if (rotorR.IsAttached && (rState == PistonState.Retracted || rState == PistonState.Retracting) && (lState == PistonState.Extended || lState == PistonState.Extending))
                return 6;

            return 0;
        }

        private PistonState GetPistonState(IMyPistonBase piston)
        {
            float upperLimit = piston.GetValueFloat("UpperLimit");
            float lowerLimit = piston.GetValueFloat("LowerLimit");
            float precision = 0.01f;


            if (piston.Velocity == 0.0f)
                return PistonState.Stopped;
            else if (piston.Velocity < 0.0f && (piston.CurrentPosition - lowerLimit) < precision)
                return PistonState.Retracted;
            else if (piston.Velocity < 0.0f && (piston.CurrentPosition - lowerLimit) > precision)
                return PistonState.Retracting;
            else if (piston.Velocity > 0.0f && (upperLimit - piston.CurrentPosition) > precision)
                return PistonState.Extending;
            else if (piston.Velocity > 0.0f && (upperLimit - piston.CurrentPosition) < precision)
                return PistonState.Extended;

            //Stopped, usually
            return PistonState.Fucked;
        }
